"""
This is equivalent of produce_c_file.py from IDAPython examples
Original: https://github.com/idapython/src/blob/master/examples/decompiler/produce_c_file.py
"""

import argparse

import ida_domain


def main():
    parser = argparse.ArgumentParser(description='Produce C listing for the entire file')
    parser.add_argument('-f', '--input-file', required=True, help='Binary input file')
    args = parser.parse_args()

    db = ida_domain.Database.open(args.input_file)
    if db:
        output_file = args.input_file + '.c'

        print(f'Generating C file: {output_file}')

        with open(output_file, 'w') as outfile:
            # Write header
            outfile.write(f'// C listing generated from: {args.input_file}\n')
            outfile.write('// Generated by IDA Domain API\n\n')

            # Get all functions
            functions = list(db.functions.get_all())
            total_functions = len(functions)
            decompiled_count = 0

            print(f'Found {total_functions} functions to decompile')

            for i, func in enumerate(functions, 1):
                func_name = db.names.get_at(func.start_ea) or f'sub_{func.start_ea:X}'
                print(
                    f'Decompiling [{i}/{total_functions}]: {func_name} at 0x{func.start_ea:X}...',
                    end='',
                )

                try:
                    # Get function signature if available
                    signature = db.functions.get_signature(func)

                    # Get pseudocode
                    pseudocode = db.functions.get_pseudocode(func)

                    if pseudocode:
                        outfile.write(f'\n// Function: {func_name} @ 0x{func.start_ea:X}\n')
                        if signature:
                            outfile.write(f'// Signature: {signature}\n')
                        outfile.write('\n'.join(pseudocode))
                        outfile.write('\n\n')
                        decompiled_count += 1
                        print(' OK')
                    else:
                        outfile.write(
                            f'\n// Failed to decompile: {func_name} @ 0x{func.start_ea:X}\n\n'
                        )
                        print(' FAILED (no pseudocode)')

                except RuntimeError as e:
                    outfile.write(
                        f'\n// Decompilation error for {func_name} @ 0x{func.start_ea:X}: {e}\n\n'
                    )
                    print(f' FAILED ({e})')

            # Write summary
            outfile.write(
                f'\n// Summary: Successfully decompiled '
                f'{decompiled_count} of {total_functions} functions\n'
            )

        print(f'\nC file generated: {output_file}')
        print(f'Successfully decompiled {decompiled_count} of {total_functions} functions')

        db.close()
    else:
        print(f'Failed to open database for {args.input_file}')
        return 1

    return 0


if __name__ == '__main__':
    exit(main())
